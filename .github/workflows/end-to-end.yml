name: End-to-end CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

# When a new job is pushed on a PR, cancel the old one.
concurrency:
  group: >
    e2e-${{ github.event_name == 'pull_request'
        && format('pr-{0}', github.event.pull_request.number)
        || format('push-{0}', github.ref) }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  end-to-end:
    name: End-to-end tests
    runs-on: [self-hosted, Linux, ARM64, provekit-build]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust toolchain, cache and bins
        uses: moonrepo/setup-rust@v1
        with:
          channel: nightly-2025-04-05
          cache-base: main
          components: rustfmt, clippy

      - name: Build all Rust targets
        run: cargo build --all-targets --all-features --verbose

      - uses: noir-lang/noirup@v0.1.2
        with:
          toolchain: v1.0.0-beta.11

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      # nargo execute is a faulty command that should be removed when toml reader is implemented
      - name: Compile and execute Nargo circuit
        working-directory: noir-examples/noir-passport-examples/complete_age_check
        run: |
          nargo compile --skip-brillig-constraints-check --force
          nargo execute
      # basic.gz should be changed to .toml file in the future when faulty command is removed
      - name: Generate Gnark inputs
        working-directory: noir-examples/noir-passport-examples/complete_age_check
        run: |
          echo "=== DEBUGGING WORKSPACE ==="
          pwd
          echo "Current working directory: $(pwd)"
          echo "=== LISTING ROOT DIRECTORY ==="
          ls -la
          echo "=== CHECKING IF TARGET EXISTS ==="
          if [ -d "./target" ]; then
            echo "Target directory exists"
            ls -al ./target
          else
            echo "Target directory does not exist"
          fi
          echo "=== END DEBUGGING ==="
          cargo run --release --bin provekit-cli prepare ./target/complete_age_check.json -o ./noir-proof-scheme.nps
          cargo run --release --bin provekit-cli prove ./noir-proof-scheme.nps ./Prover.toml -o ./noir-proof.np
          cargo run --release --bin provekit-cli generate-gnark-inputs ./noir-proof-scheme.nps ./noir-proof.np
      - name: Run Gnark verifier
        working-directory: recursive-verifier
        run: |
          go build -o gnark-verifier cmd/cli/main.go

          # Set up cleanup trap
          cleanup() {
            if [ ! -z "$MONITOR_PID" ]; then
              kill $MONITOR_PID 2>/dev/null || true
            fi
          }
          trap cleanup EXIT

          # Start monitoring in background
          (
            while true; do
              echo "=== $(date) ==="
              echo "Memory:"
              free -h
              echo "Disk:"
              df -h
              echo "Processes:"
              ps aux --sort=-%mem | head -5
              echo "=================="
              sleep 10  # Check every 10 seconds
            done
          ) &
          MONITOR_PID=$!

          # Run the main process
          ./gnark-verifier --config "../noir-examples/noir-passport-examples/complete_age_check/params_for_recursive_verifier" --r1cs "../noir-examples/noir-passport-examples/complete_age_check/r1cs.json" --pk_url ${{ vars.AGE_CHECK_PK }} --vk_url ${{ vars.AGE_CHECK_VK }}

          # Stop monitoring
          kill $MONITOR_PID