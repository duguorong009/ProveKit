# 
# Taken from http://www.prothsearch.com/riesel1.html
# 
# This is a list of PROTH primes, which are of the form (k.2^n + 1)
# This dictionary has keys that k and values that are n
# 
# 

from sage.arith.misc import is_prime, is_power_of_two, factor

PROTH_PRIMES_300 = {
1 :  [2, 4, 8, 16],

3 : [1, 2, 5, 6, 8, 12, 18, 30, 36, 41, 66, 189, 201, 209, 276, 353, 408, 438, 534, 2208, 2816, 3168, 3189, 3912, 20909, 34350, 42294, 42665, 44685, 48150, 54792, 55182, 59973, 80190, 157169, 213321, 303093, 362765, 382449, 709968, 801978, 916773, 1832496, 2145353, 2291610, 2478785, 5082306, 7033641, 10829346, 16408818 ],

5 :  [1, 3, 7, 13, 15, 25, 39, 55, 75, 85, 127, 1947, 3313, 4687, 5947, 13165, 23473, 26607, 125413, 209787, 240937, 819739, 1282755, 1320487, 1777515 ],

7 :  [2, 4, 6, 14, 20, 26, 50, 52, 92, 120, 174, 180, 190, 290, 320, 390, 432, 616, 830, 1804, 2256, 6614, 13496, 15494, 16696, 22386, 54486, 88066, 95330, 207084, 283034, 561816, 804534, 811230, 1491852, 2139912, 2167800, 2915954, 3015762, 3511774, 5775996, 18233956, 20267500 ],

9 : [1, 2, 3, 6, 7, 11, 14, 17, 33, 42, 43, 63, 65, 67, 81, 134, 162, 206, 211, 366, 663, 782, 1305, 1411, 1494, 2297, 2826, 3230, 3354, 3417, 3690, 4842, 5802, 6937, 7967, 9431, 13903, 22603, 24422, 39186, 43963, 47003, 49902, 67943, 114854, 127003, 145247, 147073, 149143, 304607, 384990, 412034, 435743, 461081, 834810, 1051026, 1807574, 2543551, 3497442, 5642513, 9778263, 11158963, 11366286, 11500843, 12406887, 13334487],

11 :  [1, 3, 5, 7, 19, 21, 43, 81, 125, 127, 209, 211, 3225, 4543, 10179, 15329, 18759, 28277, 93279, 105741, 268009, 412447, 525589, 644677, 886071, 960901, 1343347, 2230369, 2476839, 2691961, 2897409, 3771821, 8103463, 9381365, 10797109, 10803449, 15502315],

13 : [2, 8, 10, 20, 28, 82, 188, 308, 316, 1000, 28280, 38008, 43856, 88018, 109258, 114296, 521306, 562456, 684560, 1038896, 1499876, 1861732, 4998362, 5523860, 6481780, 8989858, 15294536, 16828072],

15  : [1, 2, 4, 9, 10, 12, 27, 37, 38, 44, 48, 78, 112, 168, 229, 297, 339, 517, 522, 654, 900, 1518, 2808, 2875, 3128, 3888, 4410, 6804, 7050, 7392, 19219, 21445, 21550, 24105, 24995, 34224, 34260, 43388, 48444, 61758, 184290, 294894, 300488, 403929, 483098, 635989, 701902, 734400, 1229600, 1244377, 1276177, 1368428, 1418605, 1597510, 1667744, 2393365, 2785940, 2988834, 3162659, 4246384, 4800315, 7300254, 7619838, 9312889, 9830108],

17 :  [3, 15, 27, 51, 147, 243, 267, 347, 471, 747, 2163, 3087, 5355, 6539, 7311, 99231, 824451, 1388355, 1990299, 8636199],

19 : [6, 10, 46, 366, 1246, 2038, 4386, 4438, 6838, 7498, 7998, 9450, 11890, 17034, 23290, 73338, 149146, 323638, 853546, 2206266, 6833086],

21: [1, 4, 5, 7, 9, 12, 16, 17, 41, 124, 128, 129, 187, 209, 276, 313, 397, 899, 1532, 1613, 1969, 2245, 2733, 4585, 4644, 6712, 6981, 13344, 17524, 27124, 29769, 47337, 55828, 91008, 94801, 164901, 179457, 191337, 200568, 220992, 686632, 856865, 1022168, 1240067, 1421741, 1830919, 3065701, 6048861, 9000000],

23: [1, 9, 13, 29, 41, 49, 69, 73, 341, 381, 389, 649, 1961, 3929, 977541, 1399841, 1448461, 2425641, 4300741, 9000000],

25: [2, 4, 6, 10, 20, 22, 52, 64, 78, 184, 232, 268, 340, 448, 554, 664, 740, 748, 1280, 1328, 1640, 3314, 3904, 3938, 5152, 9522, 57488, 66872, 148060, 154254, 216092, 302194, 367294, 627710, 966414, 1211488, 1258562, 1298186, 2141884, 2583690, 2927222, 3733144, 4481024, 8456828, 8788628, 9000000, 13719266],
    
27: [2, 4, 7, 16, 19, 20, 22, 26, 40, 44, 46, 47, 50, 56, 59, 64, 92, 175, 215, 275, 407, 455, 1076, 1090, 3080, 3322, 6419, 7639, 19360, 30500, 38770, 44164, 50696, 114760, 117784, 153847, 160874, 178739, 379880, 405514, 672007, 974752, 1164664, 1476347, 2218064, 5213635, 7046834, 7963247, 8437000, 12184319],
    
29: [1, 3, 5, 11, 27, 43, 57, 75, 77, 93, 103, 143, 185, 231, 245, 391, 1053, 1175, 2027, 3627, 4727, 5443, 7927, 8533, 9067, 14185, 25723, 88117, 96947, 144937, 219317, 252227, 261031, 339123, 343601, 627167, 742191, 800191, 1152765, 1416873, 1574753, 3964697, 4532463, 7374577, 7899985, 9000000],
    
31: [8, 60, 68, 140, 216, 416, 1808, 1944, 9096, 76596, 93168, 4673544, 5560820, 8348000, 9000000],

33: [1, 6, 13, 18, 21, 22, 25, 28, 66, 93, 118, 289, 412, 453, 525, 726, 828, 1420, 1630, 3076, 3118, 4452, 4941, 5236, 6346, 9133, 13401, 14214, 18766, 37249, 42685, 47805, 61372, 74178, 600270, 922782, 1130884, 2345001, 3176269, 3570132, 3649810, 9000000],
    
35: [1, 3, 7, 9, 13, 15, 31, 45, 47, 49, 55, 147, 245, 327, 355, 663, 1423, 1443, 2493, 3627, 4737, 6541, 9667, 22645, 27321, 61963, 68281, 144397, 151741, 187859, 191509, 273251, 494607, 696935, 768063, 831411, 1040005, 1357881, 1765449, 2099769, 2241049, 3570777, 3587843, 9000000],

37: [2, 4, 8, 10, 12, 16, 22, 26, 68, 82, 84, 106, 110, 166, 236, 254, 286, 290, 712, 1240, 1706, 1804, 1904, 2240, 2632, 3104, 5870, 8750, 11514, 11972, 14434, 16322, 18044, 19050, 23014, 32424, 59354, 62350, 120196, 157128, 167326, 211056, 218550, 230716, 233968, 239902, 256954, 331144, 548012, 551830, 939364, 2128328, 4046360, 9000000, 10599476, 11855148, 14166940, 15474010]

}

def proth_prime(cofactor, twoadicity):
    try:
        cofactor_list = PROTH_PRIMES_300[cofactor]
        for v in cofactor_list:
            if v == twoadicity:
                return cofactor*(2**twoadicity)  + 1
        raise IndexError
    except IndexError as ie:
        raise ValueError(f"proth prime with multiplicative cofactor {cofactor} and to-adic valuation of multiplicative order {twoadicity} not found")

def proth_in_range(cofactor_min, cofactor_max, twodicity_min, twodicity_max) -> tuple[int, int, int]:
    for key,values in PROTH_PRIMES_300.items():
        if key < cofactor_min:
            continue
        if key > cofactor_max:
            continue
        
        for v in values:
            if v < twodicity_min:
                continue
            elif v > twodicity_max:
                break
            else:
                return (key*(2**v) + 1, key, v)
    
    raise ValueError(f"No proth prime found with multiplicative co-factor in the range ({cofactor_min}, {cofactor_max}) and multiplicative two-adic valuation in the range ({twodicity_min}, {twodicity_max}) found")


if __name__=='__main__':

    def test_range_primes():
        k_min = 22
        k_max = 26
        two_min = 100
        two_max = 500

        (p, cofactor, twodic_val) = proth_in_range(k_min, k_max, two_min, two_max) 
        assert p == cofactor*(2**twodic_val) + 1
        assert two_min <= twodic_val and twodic_val <= two_max
        assert k_min <= cofactor and cofactor <= k_max
            

    def test_proth_primes():
        for key,values in PROTH_PRIMES_300.items():
            for v in values:
                if v < 256:
                    should_find = proth_prime(key, v)
                    assert is_prime(should_find)
                    assert is_power_of_two((should_find - 1)//key)
                else:
                    continue

        try:
            should_not_find = proth_prime(15, 11)
        except ValueError as e:
            pass

    test_range_primes()
    test_proth_primes()